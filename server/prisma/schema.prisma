datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* ===== ENUMS ===== */
enum Gender {
  MALE
  FEMALE
}

enum AgeBracket {
  JUNIOR // <=17
  A18    // 18+
  A35    // 35+
  A55    // 55+
}

enum Division {
  MS // Men's Singles
  MD // Men's Doubles
  WS // Women's Singles
  WD // Women's Doubles
  XD // Mixed Doubles
}

enum Level {
  NOV // Novice
  INT // Intermediate
  ADV // Advanced
  OPN // Open (keep if youâ€™ll use it; otherwise safe to drop later)
}

/* ===== CORE TABLES ===== */
model Player {
  id            Int       @id @default(autoincrement())
  name          String
  age           Int
  gender        Gender
  address       String
  contactNumber String
  checkedIn     Boolean   @default(false)
  createdAt     DateTime  @default(now())

  teamMembers   TeamMember[]
}

/* Teams store their own bracket/division/level; code is the human-facing ID (e.g., 18MDInt_001) */
model Team {
  id         Int         @id @default(autoincrement())
  code       String      @unique                   // e.g., 18MDInt_001
  age        AgeBracket
  division   Division
  level      Level
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  members    TeamMember[]

  @@index([age, division, level])
}

/* Join table: 1 member for singles, 2 for doubles; keep slot (1/2) to preserve order */
model TeamMember {
  teamId   Int
  playerId Int
  slot     Int?         // 1 or 2

  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@id([teamId, playerId])
  @@unique([teamId, slot])
  @@index([playerId])
}
